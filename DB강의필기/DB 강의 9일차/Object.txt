@ 데이터 딕셔너리 (DATA DICTIONARY)
-> 자원을 효율적으로 관리하기 위한 댱ㅇ한 정보를 저장하는 시스템 테이블
-> 데이터 딕셔너리느 사용자가 테이블을 생성하거나 사용자를 변경하는 등의
작업을 할때 데이터 베이스 서버에 의해 자동으로 갱신되는 테이블
-> 사용자는 데이터 딕셔너리의 내용을 직접 수정하거나 삭제를 수 없음
-> 데이터딕셔너리 안에는 중요한 정보가 많이 있기 때문에 사용자는 이를 활용하기
위해 데이터 딕셔너리 뷰를 사용하게 됨
	*뷰(VIEW)는 원본 테이블을 커스터마이징 해서 보여주는 역할을 하는
	가상의 TABLE

## 일반적으로 많이 쓰는 3개의 데이터 딕셔너리 뷰(DATA DICTIONARY VIEW)

1. DBX_XXXX: 데이터 베이스 관리자만 접근이 가능한 객체 등의 정보 조회	
	(DBA 는 모든 접근이 가능하므로 결국 디비에 있는 모든 객체에 대한 조회를 말함)

2. ALL_XXXX : 자신의 계정이 소유하거나 권한을 부여 받은 객체 등에 관한 정보 조회

3. USER_XXXX : 자신의 계정이 소유한 객체 등에 관한 정보 조회.



@ VIEW
-> 하나 이상의 테이블에서 원하는 데이터를 선택하여 새로운 가상 테이블을 만들어 주는것
-> 다른 테이블에 있는 데이터를 보여줄 뿐이ㅕㅁ, 데이터 자체를 포함하고 있는 것은 아님
	- 저장 장치 내에 물리적으로 존재하지 않고 가상테이블로 만들어짐
	- 물리적인 실제 테이블과의 링크 개념

-> 뷰를 사용하면 특정 사용자가 원본 텓이블에 접근하여 모든 데이터를 보게 하는것을
	방지 할 수 있음

	-원본 테이블이 아닌 뷰를 통한 특정 데이터만 보여지게 만듦

-> 뷰를 만들기 위해서는 별도의 권한이 필요함

@ VIEW Data Dictionary 확인
-> SELECT * FROM USER_VIEWS;

@ VIEW 사용법
CREATE VIEW <뷰이름> AS <SELECT 구문>

@ 뷰 생성을 위한 권한 부어(SYSTEM게정으로 권한을 부여 해야함)

GRANT CREATE VIEW TO kh;-- kh계정에 뷰 생성 권한 설정


## VIEW 를 이해 하기 위한 간단 실습 ##

-> 테이블 복사 형태

1. 기존 테이블을 편집한 복사 테이블 생성
2. 복사된 테이블을 타 게정에게 권한 부여
3. 타 계정에서 복사된 테이블을 검색
4. 원본 테이블의 정보 수정
5. 타 계정에서 복사된 테이블의 정보 검색(변경되지 않은 것을 확인)

-> 뷰를 사용한 형태

1. 기존 테이블을 편집한 VIEW 를 생성
2. 해당 VIEW 를 볼수 있는 권한을 타계정에 게 권한 부여
3. 타 계정에서 VIEW 를 검색
4. 원본 테이블의 정보 수정
5. 타 계정에서 VIEW 를 검색( 원본 테이블의 정보에 따라 VIEW 가 변경되는 것을 볼수있음)


--뷰 생성
CREATE VIEW EMP_HEALTH_VIEW
AS SELECT EMP_ID, EMP_NAME
FROM EMPLOYEE;

-- 뷰확인
SELECT * FROM EMP_HEALTH_VIEW;

-- 뷰 삭제
DROP VIEW EMP_HEALTH_VIEW;

* 생성된 뷰를 가지고 DML 구문(INSERT, UPDATE, DELETE) 사용이 가능함
* DML 구문을 가지고 뷰테이블에 내용을 변경할 시 실제 테이블의 내용이 변경되는것

@ DML( INSERT, UPDATE, DELETE) 명령어로 조작이 불가능한 경우

1. 뷰 정의에  포함 되지 않는컬럼을 조작하는 경우

2. 뷰에 포함되지 않은 컬럼 중에 베이스가 되는 테이블 컬럼이 NOT NULL
	제약 조건이 지정된 경우

3. 산술 표현식으로 정의된 뷰인 경우

4. JOIN 을 이용해 여러 테이블을 연결한 경우
	(JOIN 일 경우 베이스 테이블만 수정 가능)

5. DISTINCT 를 포함한 경우

6. 그룹함수나 GROUP BY 절을 포함한 경우


특정 업체(KHLOVE1) 에서

직원ID, 직원 이름, 부서명 정보가 필요하여 본사에 요청하였음

본사에서는 각 정보를 가지고 있는 별도의 뷰를 생성하여 

KHLOVE1 에세 SELECT 할수 있는 권한을 주고자 한다.

KHLOVE1 계정에서

SELECT * FROM EMP_INFO_VIEW

라는 SQL 을 작성하였을때 

직원ID, 직원 이름, 부서명 정보가 보일 수 있도록 VIEW 를 만들어 보아라.



@ VIEW 옵션

1. OR REPLACE
-> 생성한 뷰가 존재하면, 뷰를 갱신함

CREATE VIEW [OR REPLACE] [교체할 뷰 이름]

EX)
CREATE VIEW OR REPLECE EMP_INFO_VIEW
AS SELECT E.EMP_ID AS 부서아이디, EMP_NAME AS 이름, NVL(DEPT_TITLE,'없음') AS 부서이름
FROM EMPLOYEE E LEFT;


2. WITH CHECK OPTION
->  설정한 컬럼의 값을 수정하지 못하게 함
-> 조건(WHERE) 을 주어 뷰를 설정할 때 해당 옵션을 주게 되면
조건에 사용되는 컬럼의 값을 변경하 수 없게 됨

EX) 
CREATE VIEW EMP_VIEW
AS SELECT EMP)ID, EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = 200 WITH CHECK OPTION;

3. WITH READ ONLY
-> 뷰에 대해 조회만 가능하고, 삽입, 수정, 삭제 등을 하지 못하게 하는 옵션

	* CHECK 와 READ ONLY 의 차이점은 대상이 컬럼이 냐 아니면 전체 뷰이냐의 차이

CREATE VIEW EMP_VIEW
AS SELECT EMP)ID, EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = 200 WITH READ ONLY;


@ SEQUENCE
-> 순차적으로 정수 값을 자동으로 생성하는 객체로, 자동 번호 발생기의 역할을 함

표현식

CREATE SEQUENCE 시퀀스명
ex) CREATE SEQUENCE EMPLOYEE_SQE

1. [START WITH 숫자]
2. [INCREMENT BY 숫자]
3. [MAXVALUE 숫자 | NOMAXVALUE]
4. [MINVALUE 숫자 | NOMINVALUE]
5. [CYCLE | NOCYCLE]
6. [CHACE | NOCACHE]

설명
1. 처음 발생시킬 시작 값 지정( 기본값 1)
2. 다음 값에 대한 증가치( 기본값 1)
3. 발생시킬 최3대값 지정(10^27-1 까지 가능)
4. 발생시킬 최소값 지정 (-10^26)
5. 시퀀스가 최대값가지 증가를 완료하면 CYCLE 은 START WITH 설정값으로 돌아가고,
	NOCYCLE 은 에러를 발생함
6. CACHE 는 메모리 상에서 시퀀스값을 관리
	- 실제 값은 다 증가하지만 메모리의 효율을 위해 사용됨
	- NOCACHE 는 메모리상에서 시퀀스를 관리하지 않음

@ SEQUENCE Data Dictionary
-> SELECT * FROM USER_SEQUENCES;


@ 시퀀스 객체 생성하기

CREATE SEQUENCE USERTBL_NO_SEQ 	-- USERTBL_NO_SEQ 라는 시퀀스 객체 생성
START WITH 1			-- 시작번호는 1번 부터
INCREMENT BY 1			-- 1씩 증가
MAX VALUE 100			-- 최대 100 까지	
NOCYCLE				-- 100 이후에는증가하지 말고 에러 발생 하여라
NOCACHE;			-- 캐쉬 방식은 사용하지 않겠음.



@ 시퀀스 사용하기

CURRVAL : 현재값을 반환
NEXTVAL : 현재 시퀀스 값의 다음 값을 반환

* 첫 시작값은 없으므로 NEXTVAL을 무조건 1번을 실행하고 CURRVAL을 해야
볼 수 있음


## 시퀀스 간단 예제 ##

KH_MEMBER 테이블을 생성

컬럼

MEMBER_ID NUMBER PRIMARY KEY,
MEMBER_NAME VARCHAR2(20),
MEMBER_AGE NUMBER,
MEMBER_JOIN_COM NUMBER

이때 해당 사원들의 정보를 INSERT해야함
ID 값과 JOIN_COM은 SEQUENCE 를 이용하여 정보를 넣고자 함

ID값은 500번 부터 시작하여 10 씩 증가해서 저장하고 자함
JOIN_COM 값은 1 번부터 시작하여 1씩 증가하여 저장해야함
(ID 값과 JOIN_COM 값의 MAX 는 10000으로 지정)

500	홍길동	20	1
510	김말똥	30	2
520	삼식이	40	3
530	고길똥	24	4


@ 시퀀스 수정
-> ALTER 를 통해 해당 시퀀스를 수정 할 수 있음

ALTER SEQUENCE SEQ_EMPID
INCREMENT BY 10
MAXVALUE 400
NOCYCLE
NOCACHE;

* START WITH 값은 변경이 불가능하기 때문에 만약 다시 시작값을 ㅈ어하고 싶다면
해당 시퀀스를 삭제하고 재생성 해야 함


@ 시퀀스 삭제

DROP SEQUENCE 시퀀스명;

EX) DROP SEQUENCE SEQ_EMPID;


@ INDEX
-> SQL 명령문의 처리 속도를 향상 시키기 위해서 사용하는 오라클 객체

@ INDEX 의장점
-> 검색 속도가 빨라지고 시스템에 걸리는 부하를 줄여서 시스템 전체 성능을
향상 시킬 수 있음

@ INDEX의 단점
-> 인덱스를 위한 추가 저장 공간이 필요하고, 인덱스를 생성하는데 시간이 걸림
-> 다라서 데이터의 변경작업(INSERT/UPDATE/DELETE)이 자주 일어나는
테이블에 INDEX를 생성시 오히려 성능 저하가 발생할수있음
	- 기존 데이터에 대하여 알고리즘을 이용하 INDEX를 생성하였는데
	데이터가 변경되면 다시 새로운 알고리즘을 적용하여 INDEX를 생성하야
	하기 때문에 오히려 성능 저하가 발생할 수있음.


* 실제INDEX를 사용하여 효과적인 속도를 체감 하려면 테이블에 데이터가
	많아야지만 속도를 조금이나마 체감 할 수 있음 ...(수업에는 불가)

@ INDEX생성 표현식
-> CREATE INDEX 인덱스 명 ON 테이블명(컬럼명1, 컬럼명2, 컬럼명3,....)

@ INDEX 삭제 표현식
-> DROP INDEX 인덱스명;

@ INDEX 정보 조회 (Data Dictionary)
SELECT * FROM USER_IND_COLUMNS;


@ SYNONYM(동의어)
-> 사용자가 다른 사용자의 객체를 참조할때 [사용자 ID].[테이블명] 으로 표시 해야 함
-> 이처럼 길게 표현되는 것을 동의어(SYNONYM)로 설정하여 간단히 사용이 가능함

비공개 동의어
-> 객체에 대한 접근 권한을 부여받은 사용자가 정의한 동의어.


## 비공개 동의어 생성

CREATE SYNONYM EMP FOR EMPLOYEE;

* 단, 동의어를 생성하려면 권한이 필요함
	GRANT CREATE SYNONYM TO kh;
	

## 공개 동의어 생성
-> 공개 동의어는 DBA  계정으로 생성 해야함 (SYSTEM 계정)


CREATE PUBLIC SYNONYM DEPT FOR KH.DEPARTMENT;





























































