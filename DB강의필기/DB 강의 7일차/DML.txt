@ DML( Data Manipulation Language)
-> Data 를 조작하기 위해 사용하는 언어
-> Data 의 삽입, 수정, 삭제, 조회 등의 동작을 제어함
-> Data 를 이용하려는 사용자와 시스템 간의 인터페이스를 직접적으로 제공하는 언어
-> 가장 많이 사용됨

@ INSERT
-> 새로운 데이터(행) 를 테이블에 추가하는 구문
-> 추가할때마다 테이블의 행 개수가 증가함

사용구문
INSERT INTO <테이블명> VALUES (입력데이터1, 입력데이터2...);
혹은
INSERT INTO <테이블명> (컬럼명1, 컬럼명2....) VALUES (입력데이터1, 입력데이터2....);


EX)

CREATE TABLE INSERT_TEST
(
    DATA1 NUMBER,
    DATA2 NUMBER,
    DATA3 NUMBER,
    DATA4 NUMBER,
    DATA5 NUMBER
);

INSERT INTO INSERT_TEST 
VALUES(1,2,3,4,5);   -- 데이터 삽입

INSERT INTO INSERT_TEST(DATA2,DATA3,DATA1,DATA5,DATA4) -- 컬럼명을 안다면 직접 정할수 있음
VALUES(2,3,1,5,4);  -- 컬럼순서대로 데이터가 삽입됨

INSERT INTO
INSERT_TEST (DATA2,DATA3,DATA1,DATA5)-- 컬럼명을 이용하여 해당 데이터만 넣을수 있음
VALUES(1,2,3,4);

SELECT *  FROM INSERT_TEST;


## INSERT 시에 서브쿼리를 이용하여 데이터를 삽입할 수 있음 ##

EX)

CREATE TABLE EMP_01
(
    EMP_ID NUMBER,
    EMP_NAME VARCHAR2(30),
    DEPT_TITLE VARCHAR2(20)
);

INSERT INTO EMP_01
(
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
);

SELECT * FROM EMP_01;



@ INSERT ALL
-> INSERT시 사용하는 서브쿼리가 테이블이 같은경우 두개 이상의
테이블에 INSERT ALL을 이용하여 한번에 삽입할수 있음
-> 단, 각 서브쿼리의 검색되는 조건이 같아야 함


EX)

INSERT ALL 
WHEN HIRE_DATE < TO_DATE('00/01/01') THEN
    INTO EMP_OLD VALUES ( EMP_ID, EMP_NAME, HIRE_DATE, SALARY)
WHEN HIRE_DATE > TO_DATE('00/01/01') THEN
    INTO EMP_NEW
    VALUES ( EMP_ID, EMP_NAME, HIRE_DATE, SALARY)
    SELECT  EMP_ID, EMP_NAME, HIRE_DATE, SALARY
    FROM EMPLOYEE;



@ UPDATE
-> 테이블에 기록된 컬럼의 값을 수정하는 구문
-> 테이블의 전체 행 개수에는 변화가 없음
	(기존 데이터를 수정하는 것 뿐)


기본형식
UPDAQTE 테이블명
SET 컬럼명 = '변경될 값'
WHERE 조건

ROLLBACK; -> 돌아가기


EX)
UPDATE EMPLOYEE_COPY
SET (SALARY, BONUS) = (SELECT SALARY, BONUS FROM EMPLOYEE WHERE EMP_NAME = '유재식')
WHERE EMP_NAME = '방명수';


@ MERGE
-> 구조가 같은 두개의 테이블을 하나의 테이블로 합치는 기능
-> 두 테이블에서 지정하는 조건의 값이 존재하면 UPDATE 가 되고,
조건의 값이 없으면 INSERT 되도록 하는 기능






















