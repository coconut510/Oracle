@ TRIGGER
-> 데이터베이스가 미리 정해 놓은 조건을 만족하거나 어떠한 동작이 수행되면
자동적으로 수행되는 행동을 말함
	- 트리거의 사전적의미 : 연쇄반응
-> 트리거는 테이블이나 뷰가 INSERT , UPDATE ,DELETE 등의 DML문에 의해
데이터가 입력, 수정, 삭제 될 경우 자동으로 실행 됨

ex) 회원 탈퇴가 이루어질 경우 회원 탈퇴 테이블에 기존 회원 정보가
	자동으로 입력되도록 설정
	-> 회원이 탈퇴 했다고 해서 회원 정보를 바로 삭제 하게 되는게 아닌
	별도의 테이블에 옮겨 놓거나 탈퇴한 회원이라는 기록을 남겨야 함


@ 트리거의 실행 시점
-> 트리거는 실행 시점을 이벤트 전(BEFORE) 이나 이벤트 후(AFTER)로 지정하여 설정

@ 트리거의 이벤트
-> 트리거의 이벤트는 사용자가 어떤 DML( INSERT, UPDATE, DELETE) 문을 실행 했을때
트리거를 발생시킬 것인가를 결정

@  트리거의 몸체
-> 트리거의 몸첸,ㄴ 해당 타이밍에 해당 이벤트가 발생했을대 실행될 기본 로직이
포함되는 부분으로 BEGIN~ END 안에 작성함

@ 트리거의 유형
-> 트리거의 유형은 FOR EACH ROW 에 의해 묹장 레벨 트리거와 행 레벨 트리거로 나누어 짐
-> FOR EACH ROW 가 생략되면 " 문장레벨 트리거"
-> FOR EACH ROW 가 정의되면 "행 레벨 트리거"
-> 문장레벨 트리거는 어떤 사용자가 트리거가 설정되어 있는 테이블에 대해
DML( INSERT, UPDAQTE, DELETE) 문을 실행 시킬 때 트리거를 단 한번 발생 시킴
-> 행 레벨 트리거는  DML(INSERT, UPDATE, DELETE) 에 의해서 여러개의 행이 변경된다면
각행이 변경될때마다 트리거를 발생 시킴
	(만약 5개의 행이 변경되면 5번의 트리거가 발생함)


@ 트리거의 조건
-> 트리거의 조건은 행 레벨 트리거에서만 설정할 수 있으며 트리거 이벤트에
정의된 테이블에 이벤트가 발생할 때보다 구체적인 데이터 검색 조건을 부여할 때 사용


@ 트리거 생성 확인
SELECT * FROM ALL_TRIGGERS;
SELECT * FROM USER_TRIGGERS;


<바인드 변수> 2가지
	- FOR EACH ROW 를 사용해야 함
:NEW  - 새로 입력된 (INSERT, UPDATE) 데이터
:OLD - 기존 데이터 (UPDATE, DELETE)

:OLD.컬럼명 -> SQL 반영 전의 컬럼 데이터
:NEW.컬럼명 -> SQL 반영 후의 컬럼 데이터

* DELETE는 전에는 삭제 이기 때문에 OLD 만 사용할 수 있음

삭제용 트리거

CREATE OR REPLACE TRIGGER M_TBL_TRG
AFTER DELETE ON M_TBL
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('삭제완료');
    INSERT INTO DEL_M_TBL VALUES(:OLD.USERID,:OLD.USERNAME,:OLD.ENROLL_DATE,SYSDATE);
END;
/


신규 데이터가 들어왔을때 트리거.

CREATE OR REPLACE TRIGGER M_TBL_INSERT_TRG
AFTER INSERT
ON M_TBL
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE(:NEW.USERNAME ||'님이 신규 가입하셨습니다.');
END;
/



CREATE OR REPLACE TRIGGER LOG_TRG
AFTER UPDATE 
ON M_TBL
FOR EACH ROW
BEGIN
    INSERT INTO LOG_TBL VALUES(:OLD.USERID, :OLD.USERNAME || '->' || :NEW.USERNAME , SYSDATE);
END;
/


ex)
 제품이 입고될때마다 상품 재고 테이블의 수치를 자동으로 변경하는 트리거 만들기
(입, 출고 될 때마다 관리자가 수동으로 수치를 조정하면 불편하고 일이 많아짐)

2개의 테이블
1. 제품 및 재고 테이블
2. 입출고 테이블











































