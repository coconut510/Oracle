DESC EMPLOYEE;

CREATE TABLE MEMBER(
	MEMBER_ID VARCHAR2(20),
	MEMBER_PWD VARCHAR2(20),
	MEMBER_NAME VARCHAR2(20)
);

DESC MEMBER;

COMMENT ON COLUMN MEMBER.MEMBER_ID IS '회원아이디';
COMMENT ON COLUMN MEMBER.MEMBER_PWD IS '비밀번호';
COMMENT ON COLUMN MEMBER.MEMBER_NAME IS '회원이름';

INSERT INTO MEMBER VALUES ('mslove','1111','노민수');
INSERT INTO MEMBER VALUES ('mslove','2222','김민수');
SELECT * FROM MEMBER;

SELECT * FROM EMPLOYEE;


SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'EMPLOYEE';


CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER ,
	USER_ID VARCHAR2(20) NOT NULL,
	USER_PWD VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	GENDER VARCHAR2(30) NOT NULL,
	PHONE VARCHAR2(30) NOT NULL,
	EMAIL VARCHAR2(50) NOT NULL
);


SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'NOTCONS';

INSERT INTO USER_NOTCONS
VALUES(1,NULL,NULL, NULL, NULL, NULL, NULL);

SELECT * FROM USER_NOTCONS;

DROP TABLE USER_NOTCONS;
-- 제약조건 확인
SELECT TABLE_NAME, COLUMN_NAME, CONSTRAINT_NAME
FROM USER_CONS_COLUMNS -- 만든
WHERE TABLE_NAME = 'USER_NOTCONS'
UNION
SELECT TABLE_NAME, CONSTRAINT_NAME, CONSTRAINT_TYPE FROM USER_CONSTRAINTS --  제약 조건을 가진 열에 대한 정보 테이블
WHERE TABLE_NAME = 'USER_NOTCONS'
ORDER BY 3 DESC;


INSERT INTO USER_NOTCONS
VALUES(1,'user11','pass11', '홍길동', 'M', '010-1111-2222', 'hong@iei.or.kr');
INSERT INTO USER_NOTCONS
VALUES(2,'user22','pass11', '홍길동', 'M', '010-1111-2222', 'hong@iei.or.kr');


SELECT * FROM USER_NOTCONS;

DROP TABLE USER_NOTCONS;

CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER ,
	USER_ID VARCHAR2(20) NOT NULL,
	USER_PWD VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	GENDER VARCHAR2(30) NOT NULL,
	PHONE VARCHAR2(30) NOT NULL,
	EMAIL VARCHAR2(50) NOT NULL,
    UNIQUE(USER_ID)
);

DROP TABLE USER_NOTCONS;

--- PRIMARY KEY 설정한 테이블 생성
CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER ,
	USER_ID VARCHAR2(20),
	USER_PWD VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	GENDER VARCHAR2(30) NOT NULL,
	PHONE VARCHAR2(30) NOT NULL,
	EMAIL VARCHAR2(50) NOT NULL,
	PRIMARY KEY (USER_NO)		-- 테이블 레벨
);

INSERT INTO USER_NOTCONS
VALUES(1,'user11','pass11','홍길동','M','010-1111-2222','hong@iei.or.kr');

INSERT INTO USER_NOTCONS
VALUES(2,'user22','pass11','홍길동','M','010-1111-2222','hong@iei.or.kr');

INSERT INTO USER_NOTCONS
VALUES(3,'user33','pass11','김말똥','T','010-1111-2222','hong@iei.or.kr');

SELECT * FROM USER_NOTCONS;

DROP TABLE USER_NOTCONS;

--- CHECK 제약 조건( GENDER 컬럼에 'M'또는 'F'값 설정)
CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER ,
	USER_ID VARCHAR2(20) UNIQUE,
	USER_PWD VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	GENDER VARCHAR2(30) CHECK(GENDER IN('M','F')),
	PHONE VARCHAR2(30) NOT NULL,
	EMAIL VARCHAR2(50) NOT NULL,
	PRIMARY KEY (USER_NO)
);



-- 회원이 물품을 구매했을 경우 기록하는 테이블 생성
-- 구매 테이블



CREATE TABLE BUY
(
    BUY_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20),
    PRODUCT_NAME VARCHAR2(20),
    REG_DATE DATE
);

INSERT INTO BUY VALUES(1,'user11','사과',SYSDATE);
INSERT INTO BUY VALUES(2,'kkkttt','바나나',SYSDATE); -- 존재하지 않는 회원이 구매한 이력.

SELECT * FROM BUY;

DROP TABLE BUY;
-- 외래키 설정을 하여 정상처리 될수있는 테이블 생성

CREATE TABLE USER_NOTCONS
(
	USER_NO NUMBER ,
	USER_ID VARCHAR2(20) UNIQUE,
	USER_PWD VARCHAR2(30) NOT NULL,
	USER_NAME VARCHAR2(30) NOT NULL,
	GENDER VARCHAR2(30) CHECK(GENDER IN('M','F')),
	PHONE VARCHAR2(30) NOT NULL,
	EMAIL VARCHAR2(50) NOT NULL,
	PRIMARY KEY (USER_NO)
);

CREATE TABLE BUY
(
    BUY_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20),
    PRODUCT_NAME VARCHAR2(20),
    REG_DATE DATE,
    FOREIGN KEY(USER_ID) REFERENCES USER_NOTCONS(USER_ID)
    ON DELETE CASCADE
);
INSERT INTO USER_NOTCONS
VALUES(1,'user11','pass11','홍길동','M','010-1111-2222','hong@iei.or.kr');

INSERT INTO USER_NOTCONS
VALUES(2,'user22','pass11','홍길동','M','010-1111-2222','hong@iei.or.kr');

INSERT INTO USER_NOTCONS
VALUES(3,'user33','pass11','김말똥','F','010-1111-2222','hong@iei.or.kr');

INSERT INTO USER_NOTCONS
VALUES(4,'user44','pass11','고길똥','F','010-1111-2222','kil@iei.or.kr');

INSERT INTO USER_NOTCONS
VALUES(5,'user55','pass11','둘리','M','010-1111-2222','2ri@iei.or.kr');

INSERT INTO BUY VALUES(1,'user11','사과',SYSDATE);

INSERT INTO BUY VALUES(2,'user22','파인애플',SYSDATE);

INSERT INTO BUY VALUES(3,'user33','딸기',SYSDATE); 

SELECT * FROM BUY;
DROP TABLE BUY;
DROP TABLE USER_NOTCONS;

SELECT * FROM USER_NOTCONS;

DELETE FROM USER_NOTCONS WHERE USER_ID = 'user11';

CREATE TABLE testTBL
(
    DATA1 NUMBER DEFAULT 100,
    DATE2 NUMBER DEFAULT 200
);

INSERT INTO testTBL VALUES(1,1);
INSERT INTO testTBL VALUES(DEFAULT, DEFAULT);
SELECT * FROM testTBL;

CREATE TABLE EMP_DEPT_TBL
AS SELECT EMP_NAME, DEPT_TITLE 
FROM EMPLOYEE 
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID);

SELECT * FROM EMP_DEPT_TBL;

CREATE TABLE BUY
(
    BUY_NO NUMBER PRIMARY KEY,
    USER_ID VARCHAR2(20),
    PRODUCT_NAME VARCHAR2(20),
    REG_DATE DATE,
    FOREIGN KEY(USER_ID) REFERENCES USER_NOTCONS(USER_ID)
    ON DELETE CASCADE
);

-- 실습1번--
CREATE TABLE EXPERT_TBL
(
    MEMBER_CODE NUMBER PRIMARY KEY,
    MEMBER_ID VARCHAR2(20) UNIQUE,
    MEMBER_PWD CHAR(20) NOT NULL,
    MEMBER_NAME NCHAR(10) NOT NULL,
    MEMBER_ADDR CHAR(50) NOT NULL,
    GENDER VARCHAR2(5) CHECK(GENDER IN('남','여')),
    PHONE VARCHAR2(20) DEFAULT '000-0000-0000'
);

COMMENT ON COLUMN EXPERT_TBL.PHONE IS '-- 회원 연락처';

SELECT * FROM EXPERT_TBL;

SELECT COLUMN_NAME, DATA_TYPE, NULLABLE, DATA_DEFAULT
FROM ALL_TAB_COLUMNS -- 만든
WHERE TABLE_NAME = 'EXPERT_TBL';

DROP TABLE  EXPERT_TBL;
DROP TABLE  A3Company_TBL;

-- 실습2번--
CREATE TABLE A3Company_TBL
(
    MEMBER_CODE NUMBER, 
    SKILL NCHAR(10) NOT NULL,
    FOREIGN KEY(MEMBER_CODE) REFERENCES EXPERT_TBL(MEMBER_CODE)
    ON DELETE CASCADE
);
SELECT COLUMN_NAME, DATA_TYPE, NULLABLE, DATA_DEFAULT
FROM ALL_TAB_COLUMNS -- 만든
WHERE TABLE_NAME = 'A3COMPANY_TBL';
-- 실습3번--

--실습4번--
INSERT INTO EXPERT_TBL VALUES(100,'mslove','1233','노민수','경기도 부천','남','010-4252-5664');
INSERT INTO EXPERT_TBL VALUES(101,'khlove','5437','경실련','인천광역시','여','010-1222-4444');
INSERT INTO EXPERT_TBL VALUES(102,'samsam2','jojo11','김조조','서울시 구로','남','010-4555-7778');
INSERT INTO EXPERT_TBL VALUES(103,'monqshell','choco00','이롯데','남태평양','여','010-6666-7458');
INSERT INTO EXPERT_TBL VALUES(104,'candy','whiteday','박인기','후쿠시마 원전','남',DEFAULT);
INSERT INTO EXPERT_TBL VALUES(105,'smart','dar00','최바보','베이징','남','010-8996-4226');

SELECT * FROM EXPERT_TBL;

-- 실습5번--
INSERT INTO A3Company_TBL VALUES(100,'해킹');
INSERT INTO A3Company_TBL VALUES(104,'교육');
INSERT INTO A3Company_TBL VALUES(102,'교육');
INSERT INTO A3Company_TBL VALUES(105,'개발');

SELECT * FROM A3Company_TBL;



CREATE TABLE INSERT_TEST
(
    DATA1 NUMBER,
    DATA2 NUMBER,
    DATA3 NUMBER,
    DATA4 NUMBER,
    DATA5 NUMBER
);

INSERT INTO INSERT_TEST 
VALUES(1,2,3,4,5);

INSERT INTO INSERT_TEST(DATA2,DATA3,DATA1,DATA5,DATA4)
VALUES(2,3,1,5,4);

INSERT INTO
INSERT_TEST (DATA2,DATA3,DATA1,DATA5)
VALUES(1,2,3,4);

SELECT *  FROM INSERT_TEST;


CREATE TABLE EMP_01
(
    EMP_ID NUMBER,
    EMP_NAME VARCHAR2(30),
    DEPT_TITLE VARCHAR2(20)
);

INSERT INTO EMP_01
(
    SELECT EMP_ID, EMP_NAME, DEPT_TITLE
    FROM EMPLOYEE
    LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
);

SELECT * FROM EMP_01;

CREATE TABLE EMP_DEPT_01
AS SELECT EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE
    FROM EMPLOYEE
    WHERE 1 = 0;
    
CREATE TABLE EMP_MANAGER
AS SELECT EMP_ID, EMP_NAME, MANAGER_ID
    FROM EMPLOYEE
    WHERE 1 = 0;
    
    
    
-- [EMP_DEPT_01] 테이블에 EMPLOYEE 테이블에서 부서코드가 D2 인 직원을
-- 조회하여 사번, 이름, 소속부서, 입사일을 삽입하고, 
-- [EMP_MANAGER] 테이블에 EMPLOYEE 테이블에서 부서코드가 D2 인 직원을
-- 조회하여 사번, 이름, 관리자 사번을 삽입 해야 함

-- 즉, 가져오는 테이블명 : EMPLOYEE
-- 조건 : 부서코드가 D2
-- 테이블과 조건이 같다면 ! INSERT ALL 을 이용하여 한번에 처리가 가능함.

INSERT ALL
INTO EMP_DEPT_01
VALUES (EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE)
INTO EMP_MANAGER
VALUES (EMP_ID, EMP_NAME, MANAGER_ID)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, HIRE_DATE, MANAGER_ID
FROM EMPLOYEE
WHERE DEPT_CODE = 'D2';


SELECT * FROM EMP_DEPT_01;
SELECT * FROM EMP_MANAGER;


--## INSERT ALL을 사용하여 데이터 넣기 실습

--1. EMPLOYEE 테이블의 구조를 복사하여 사번,이름,입사일,급여를 기록할 수 있는 테이블
--EMP_OLD와 EMP_NEW를 생성하세요
--	(같은 컬럼들을 가지고 있지만 테이블명이 달라지게 생성하는 것뿐)
CREATE TABLE EMP_OLD
AS SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY
FROM EMPLOYEE
WHERE 1 = 0;

CREATE TABLE EMP_NEW
AS SELECT EMP_ID, EMP_NAME, HIRE_DATE, SALARY
FROM EMPLOYEE
WHERE 1 = 0;

--2. EMPLOYEE 테이블의 모든 사원의 입사일을 기준으로 2000년 1월 1일 이전에 입사한 사원의
--사번,이름,입사일,급여를 조회해서 EMP_OLD 테이블에 삽입하고,
--그전에 입사한 사원의 정보는 EMP_NEW 테이블에 삽입하시오


INSERT ALL 
WHEN HIRE_DATE < TO_DATE('00/01/01') THEN
    INTO EMP_OLD VALUES ( EMP_ID, EMP_NAME, HIRE_DATE, SALARY)
WHEN HIRE_DATE > TO_DATE('00/01/01') THEN
    INTO EMP_NEW
    VALUES ( EMP_ID, EMP_NAME, HIRE_DATE, SALARY)
    SELECT  EMP_ID, EMP_NAME, HIRE_DATE, SALARY
    FROM EMPLOYEE;


DROP TABLE EMP_OLD;
DROP TABLE EMP_NEW;

 SELECT * FROM EMP_OLD;
 SELECT * FROM EMP_NEW;

CREATE TABLE DEPT_COPY
AS SELECT * FROM DEPARTMENT;

UPDATE DEPT_COPY
SET DEPT_ID = 'D0'
WHERE DEPT_TITLE = '총무부';

SELECT * FROM DEPT_COPY;


--- 평상시 유재식 사원을 부러워하던 방명수 사원의 급여와 보너스율을 유재식 사원과
-- 동일하게 변경해 주기로 했다. 이를 반영하는 UPDATE 구문을 작성하시오

CREATE TABLE EMPLOYEE_COPY
AS SELECT * FROM EMPLOYEE;

UPDATE EMPLOYEE_COPY
SET (SALARY, BONUS) = (SELECT SALARY, BONUS FROM EMPLOYEE WHERE EMP_NAME = '유재식')
WHERE EMP_NAME = '방명수';

SELECT * FROM EMPLOYEE_COPY;

CREATE TABLE M_TEST01
(
    ID CHAR(20),
    NAME VARCHAR2(20)
);

CREATE TABLE M_TEST02
(
    ID CHAR(20),
    NAME VARCHAR2(20)
);


INSERT INTO M_TEST01 VALUES('user11','유영훈');
INSERT INTO M_TEST01 VALUES('user22','유미경');
INSERT INTO M_TEST01 VALUES('user33','유지섭');


INSERT INTO M_TEST02 VALUES ('user12', '무정현');
INSERT INTO M_TEST02 VALUES ('user22', '무지수');
INSERT INTO M_TEST02 VALUES ('user32', '무형조');

MERGE INTO M_TEST01 USING M_TEST02 ON(M_TEST01.ID = M_TEST02.ID)
WHEN MATCHED THEN UPDATE SET M_TEST01.NAME = M_TEST02.NAME
WHEN NOT MATCHED THEN INSERT VALUES(M_TEST02.ID, M_TEST02.NAME);

SELECT * FROM M_TEST01;
SELECT * FROM M_TEST02;

------------다시하기 숙제------------

--1번
CREATE TABLE EXPERT_TBL
(
    MEMBER_CODE NUMBER PRIMARY KEY,
    MEMBER_ID VARCHAR2(20),
    MEMBER_PWD CHAR(20) NOT NULL,
    MEMBER_NAME NCHAR(10) NOT NULL,
    MEMBER_ADDR CHAR(50) NOT NULL,
    GENDER VARCHAR2(5) CHECK(GENDER IN('남','여')),
    PHONE VARCHAR2(20) DEFAULT '000-0000-0000'
);

COMMENT ON COLUMN EXPERT_TBL.PHONE IS '-- 회원 연락처';

--2 번
CREATE TABLE A3Company_TBL
(
    MEMBER_CODE NUMBER,
    SKILL NCHAR(10) NOT NULL,
    FOREIGN KEY(MEMBER_CODE) REFERENCES EXPERT_TBL(MEMBER_CODE)
    ON DELETE CASCADE
);

--3 번
INSERT INTO EXPERT_TBL VALUES(100,'mslove','1234','노민수','경기도 부천','남','010-4254-5664');
INSERT INTO EXPERT_TBL VALUES(101,'khlove','5437','경실련','인천광역시','여','010-4254-5664');
INSERT INTO EXPERT_TBL VALUES(102,'samsam2','jojo11','김조조','서울시 구로','남','010-4254-5664');
INSERT INTO EXPERT_TBL VALUES(103,'monqshell','choco00','이롯데','남태평양','여','010-4254-5664');
INSERT INTO EXPERT_TBL VALUES(104,'candy','whitedate','박인기','후쿠시마 원전','남',DEFAULT);
INSERT INTO EXPERT_TBL VALUES(105,'smart','car00','최바보','베이징','남','010-4254-5664');


--4 번
INSERT INTO A3Company_TBL VALUES(100,'해킹');
INSERT INTO A3Company_TBL VALUES(104,'교육');
INSERT INTO A3Company_TBL VALUES(102,'교육');
INSERT INTO A3Company_TBL VALUES(105,'개발');